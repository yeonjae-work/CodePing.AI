name: 🚀 CodePing.AI CD Pipeline

on:
  workflow_run:
    workflows: ["🚀 CodePing.AI CI Pipeline"]
    types:
      - completed
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      force_deploy:
        description: 'Force deployment (skip some checks)'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 🔍 배포 전 검증
  pre-deployment-check:
    name: 🔍 Pre-deployment Check
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch'
    
    outputs:
      deploy_environment: ${{ steps.determine-env.outputs.environment }}
      deploy_version: ${{ steps.version.outputs.version }}
      
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🎯 Determine deployment environment
      id: determine-env
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
        else
          echo "environment=staging" >> $GITHUB_OUTPUT
        fi
        
    - name: 🏷️ Generate version
      id: version
      run: |
        if [ "${{ github.ref_name }}" == "main" ]; then
          VERSION="v$(date +%Y%m%d)-$(echo ${{ github.sha }} | cut -c1-8)"
        else
          VERSION="dev-$(echo ${{ github.sha }} | cut -c1-8)"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Generated version: $VERSION"
        
    - name: 📊 Validate deployment readiness
      run: |
        echo "🔍 Checking deployment readiness..."
        echo "- Environment: ${{ steps.determine-env.outputs.environment }}"
        echo "- Version: ${{ steps.version.outputs.version }}"
        echo "- Commit: ${{ github.sha }}"
        echo "- Force deploy: ${{ github.event.inputs.force_deploy }}"
        
        # PyPI 패키지 의존성 체크
        python -m pip install --upgrade pip
        pip install -r requirements.txt --dry-run
        echo "✅ Dependencies check passed"

  # 🐳 Docker 이미지 빌드 및 푸시
  build-and-push:
    name: 🐳 Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: pre-deployment-check
    
    outputs:
      image_digest: ${{ steps.build.outputs.digest }}
      
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔐 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 🏷️ Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=${{ needs.pre-deployment-check.outputs.deploy_version }}
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: 🔨 Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
        
    - name: 📊 Image security scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.pre-deployment-check.outputs.deploy_version }}
        format: 'sarif'
        output: 'trivy-image-results.sarif'
        
    - name: 📊 Upload image scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-image-results.sarif'

  # 🏗️ Staging 배포
  deploy-staging:
    name: 🏗️ Deploy to Staging
    runs-on: ubuntu-latest
    needs: [pre-deployment-check, build-and-push]
    if: needs.pre-deployment-check.outputs.deploy_environment == 'staging' || needs.pre-deployment-check.outputs.deploy_environment == 'production'
    
    environment:
      name: staging
      url: https://staging.codeping.ai
      
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Set up deployment configs
      run: |
        mkdir -p deployment/staging
        cat > deployment/staging/docker-compose.yml << EOF
        version: '3.8'
        services:
          app:
            image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.pre-deployment-check.outputs.deploy_version }}
            ports:
              - "8000:8000"
            environment:
              - ENVIRONMENT=staging
              - DATABASE_URL=\${DATABASE_URL}
              - GITHUB_WEBHOOK_SECRET=\${GITHUB_WEBHOOK_SECRET}
              - SLACK_WEBHOOK_URL=\${SLACK_WEBHOOK_URL}
              - OPENAI_API_KEY=\${OPENAI_API_KEY}
            restart: unless-stopped
            healthcheck:
              test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
              interval: 30s
              timeout: 10s
              retries: 3
              
          postgres:
            image: postgres:15
            environment:
              - POSTGRES_DB=codeping_staging
              - POSTGRES_USER=\${POSTGRES_USER}
              - POSTGRES_PASSWORD=\${POSTGRES_PASSWORD}
            volumes:
              - postgres_data:/var/lib/postgresql/data
            restart: unless-stopped
            
        volumes:
          postgres_data:
        EOF
        
    - name: 🚀 Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment..."
        echo "📦 Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.pre-deployment-check.outputs.deploy_version }}"
        echo "🏷️ Version: ${{ needs.pre-deployment-check.outputs.deploy_version }}"
        
        # 실제 배포 로직은 여기에 구현
        # 예: SSH로 서버에 접속하여 docker-compose up
        echo "✅ Staging deployment completed"
        
    - name: 🧪 Run smoke tests
      run: |
        echo "🧪 Running smoke tests on staging..."
        
        # 헬스체크 테스트
        echo "🔍 Health check test"
        # curl -f https://staging.codeping.ai/health || exit 1
        
        # API 엔드포인트 테스트
        echo "🔍 API endpoint test"
        # curl -f https://staging.codeping.ai/api/status || exit 1
        
        echo "✅ Smoke tests passed"

  # 🎯 Production 배포 (수동 승인 필요)
  deploy-production:
    name: 🎯 Deploy to Production
    runs-on: ubuntu-latest
    needs: [pre-deployment-check, build-and-push, deploy-staging]
    if: needs.pre-deployment-check.outputs.deploy_environment == 'production' && needs.deploy-staging.result == 'success'
    
    environment:
      name: production
      url: https://codeping.ai
      
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔧 Set up production configs
      run: |
        mkdir -p deployment/production
        cat > deployment/production/docker-compose.yml << EOF
        version: '3.8'
        services:
          app:
            image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.pre-deployment-check.outputs.deploy_version }}
            ports:
              - "8000:8000"
            environment:
              - ENVIRONMENT=production
              - DATABASE_URL=\${DATABASE_URL}
              - GITHUB_WEBHOOK_SECRET=\${GITHUB_WEBHOOK_SECRET}
              - SLACK_WEBHOOK_URL=\${SLACK_WEBHOOK_URL}
              - OPENAI_API_KEY=\${OPENAI_API_KEY}
            restart: unless-stopped
            deploy:
              replicas: 3
              resources:
                limits:
                  memory: 1G
                  cpus: '0.5'
            healthcheck:
              test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
              interval: 30s
              timeout: 10s
              retries: 3
              
          postgres:
            image: postgres:15
            environment:
              - POSTGRES_DB=codeping_production
              - POSTGRES_USER=\${POSTGRES_USER}
              - POSTGRES_PASSWORD=\${POSTGRES_PASSWORD}
            volumes:
              - postgres_data:/var/lib/postgresql/data
            restart: unless-stopped
            
          redis:
            image: redis:7-alpine
            restart: unless-stopped
            
        volumes:
          postgres_data:
        EOF
        
    - name: 🚀 Deploy to production
      run: |
        echo "🚀 Deploying to production environment..."
        echo "📦 Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.pre-deployment-check.outputs.deploy_version }}"
        echo "🏷️ Version: ${{ needs.pre-deployment-check.outputs.deploy_version }}"
        
        # Blue-Green 배포 또는 Rolling 업데이트 로직
        echo "🔄 Performing rolling update..."
        
        # 실제 배포 로직은 여기에 구현
        echo "✅ Production deployment completed"
        
    - name: 🧪 Run production smoke tests
      run: |
        echo "🧪 Running production smoke tests..."
        
        # 헬스체크 테스트
        echo "🔍 Health check test"
        # curl -f https://codeping.ai/health || exit 1
        
        # 핵심 기능 테스트
        echo "🔍 Core functionality test"
        # curl -f https://codeping.ai/api/status || exit 1
        
        echo "✅ Production smoke tests passed"

  # 📊 배포 후 모니터링
  post-deployment-monitoring:
    name: 📊 Post-deployment Monitoring
    runs-on: ubuntu-latest
    needs: [pre-deployment-check, deploy-staging]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    
    steps:
    - name: 📊 Monitor deployment health
      run: |
        echo "📊 Starting post-deployment monitoring..."
        
        ENV="${{ needs.pre-deployment-check.outputs.deploy_environment }}"
        VERSION="${{ needs.pre-deployment-check.outputs.deploy_version }}"
        
        echo "🔍 Monitoring environment: $ENV"
        echo "🏷️ Deployed version: $VERSION"
        
        # 5분간 헬스체크 모니터링
        for i in {1..10}; do
          echo "🔍 Health check attempt $i/10"
          # 실제 헬스체크 로직
          sleep 30
        done
        
        echo "✅ Post-deployment monitoring completed"
        
    - name: 📈 Performance baseline check
      run: |
        echo "📈 Checking performance baseline..."
        
        # 응답시간, 메모리 사용량 등 기본 성능 지표 체크
        echo "🔍 Response time check"
        echo "🔍 Memory usage check"
        echo "🔍 CPU usage check"
        
        echo "✅ Performance baseline within acceptable range"

  # 🔄 롤백 준비
  prepare-rollback:
    name: 🔄 Prepare Rollback
    runs-on: ubuntu-latest
    needs: [pre-deployment-check, deploy-staging]
    if: failure()
    
    steps:
    - name: 🔄 Prepare rollback strategy
      run: |
        echo "🔄 Preparing rollback strategy..."
        
        # 이전 버전 정보 조회
        echo "🔍 Finding previous stable version..."
        
        # 롤백 스크립트 준비
        echo "📝 Preparing rollback scripts..."
        
        echo "⚠️ Rollback prepared. Manual intervention may be required."

  # 📱 배포 알림
  deployment-notification:
    name: 📱 Deployment Notification
    runs-on: ubuntu-latest
    needs: [pre-deployment-check, deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: 📱 Send success notification
      if: needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success'
      run: |
        ENV="${{ needs.pre-deployment-check.outputs.deploy_environment }}"
        VERSION="${{ needs.pre-deployment-check.outputs.deploy_version }}"
        
        echo "✅ Deployment successful!"
        echo "🎯 Environment: $ENV"
        echo "🏷️ Version: $VERSION"
        echo "📦 Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$VERSION"
        echo "🔗 URL: https://$( [ "$ENV" = "production" ] && echo "codeping.ai" || echo "staging.codeping.ai" )"
        
    - name: 📱 Send failure notification
      if: failure()
      run: |
        echo "❌ Deployment failed!"
        echo "🔧 Please check the logs and fix the issues"
        echo "🔄 Rollback may be required" 