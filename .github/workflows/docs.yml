name: 📚 Documentation Automation

on:
  push:
    branches: [ main, develop ]
    paths:
      - '**/*.py'
      - '**/*.md'
      - 'requirements.txt'
      - 'pyproject.toml'
      - 'docs/**'
  pull_request:
    branches: [ main ]
    paths:
      - '**/*.py'
      - '**/*.md'
      - 'requirements.txt'
      - 'docs/**'
  schedule:
    # 매주 일요일 오전 3시 (UTC)에 전체 문서 재생성
    - cron: '0 3 * * 0'
  workflow_dispatch:
    inputs:
      doc_type:
        description: 'Documentation type to generate'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - api
        - architecture
        - changelog
        - coverage

env:
  PYTHON_VERSION: "3.12"

jobs:
  # 📊 코드 분석 및 메트릭 수집
  code-analysis:
    name: 📊 Code Analysis & Metrics
    runs-on: ubuntu-latest
    
    outputs:
      has_code_changes: ${{ steps.changes.outputs.has_code_changes }}
      has_doc_changes: ${{ steps.changes.outputs.has_doc_changes }}
      
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 🔍 Detect changes
      id: changes
      run: |
        if git diff --name-only HEAD~1 HEAD | grep -E '\.(py|pyi)$' > /dev/null; then
          echo "has_code_changes=true" >> $GITHUB_OUTPUT
        else
          echo "has_code_changes=false" >> $GITHUB_OUTPUT
        fi
        
        if git diff --name-only HEAD~1 HEAD | grep -E '\.(md|rst|txt)$' > /dev/null; then
          echo "has_doc_changes=true" >> $GITHUB_OUTPUT
        else
          echo "has_doc_changes=false" >> $GITHUB_OUTPUT
        fi
        
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 🔧 Install analysis tools
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pdoc3 sphinx sphinx-rtd-theme pydocstyle radon vulture
        pip install coverage pytest-cov interrogate
        
    - name: 📊 Generate code metrics
      run: |
        mkdir -p docs/metrics
        
        # 코드 복잡도 분석
        echo "# 📊 Code Complexity Analysis" > docs/metrics/complexity.md
        echo "" >> docs/metrics/complexity.md
        echo "Generated on: $(date)" >> docs/metrics/complexity.md
        echo "" >> docs/metrics/complexity.md
        
        radon cc . --show-complexity --total-average --json > docs/metrics/complexity.json
        radon mi . --json > docs/metrics/maintainability.json
        radon raw . --json > docs/metrics/raw_metrics.json
        
        # 복잡도 요약을 마크다운으로 변환
        python -c "
        import json
        
        with open('docs/metrics/complexity.json') as f:
            data = json.load(f)
            
        print('## 🔍 Cyclomatic Complexity')
        print('| File | Function | Complexity | Grade |')
        print('|------|----------|------------|-------|')
        
        for file_path, functions in data.items():
            if isinstance(functions, list):
                for func in functions:
                    if isinstance(func, dict) and 'complexity' in func:
                        grade = 'A' if func['complexity'] <= 5 else 'B' if func['complexity'] <= 10 else 'C' if func['complexity'] <= 20 else 'D'
                        print(f'| {file_path} | {func.get(\"name\", \"N/A\")} | {func[\"complexity\"]} | {grade} |')
        " >> docs/metrics/complexity.md
        
    - name: 📈 Generate test coverage report
      run: |
        mkdir -p docs/coverage
        
        # 테스트 커버리지 실행
        python -m pytest tests/ --cov=. --cov-report=html --cov-report=json --cov-report=term
        
        # 커버리지 데이터를 docs로 이동
        if [ -d "htmlcov" ]; then
          mv htmlcov docs/coverage/
        fi
        
        if [ -f "coverage.json" ]; then
          mv coverage.json docs/coverage/
        fi
        
        # 커버리지 요약 생성
        echo "# 📊 Test Coverage Report" > docs/coverage/README.md
        echo "" >> docs/coverage/README.md
        echo "Generated on: $(date)" >> docs/coverage/README.md
        echo "" >> docs/coverage/README.md
        
        if [ -f "docs/coverage/coverage.json" ]; then
          python -c "
          import json
          
          with open('docs/coverage/coverage.json') as f:
              data = json.load(f)
              
          total = data['totals']
          print(f'## 📈 Overall Coverage: {total[\"percent_covered\"]:.1f}%')
          print('')
          print(f'- **Lines Covered**: {total[\"covered_lines\"]} / {total[\"num_statements\"]}')
          print(f'- **Missing Lines**: {total[\"missing_lines\"]}')
          print('')
          print('## 📁 File Coverage')
          print('| File | Coverage | Lines | Missing |')
          print('|------|----------|-------|---------|')
          
          for file_path, file_data in data['files'].items():
              coverage = file_data['summary']['percent_covered']
              covered = file_data['summary']['covered_lines']
              total_lines = file_data['summary']['num_statements']
              missing = file_data['summary']['missing_lines']
              print(f'| {file_path} | {coverage:.1f}% | {covered}/{total_lines} | {missing} |')
          " >> docs/coverage/README.md
        fi
        
    - name: 📝 Documentation quality check
      run: |
        mkdir -p docs/quality
        
        # Docstring 커버리지 체크
        interrogate . --generate-badge docs/quality/docstring-coverage.svg
        interrogate . --verbose > docs/quality/docstring-report.txt
        
        # 문서 품질 리포트 생성
        echo "# 📝 Documentation Quality Report" > docs/quality/README.md
        echo "" >> docs/quality/README.md
        echo "Generated on: $(date)" >> docs/quality/README.md
        echo "" >> docs/quality/README.md
        echo "![Docstring Coverage](docstring-coverage.svg)" >> docs/quality/README.md
        echo "" >> docs/quality/README.md
        echo "## 📊 Detailed Report" >> docs/quality/README.md
        echo '```' >> docs/quality/README.md
        cat docs/quality/docstring-report.txt >> docs/quality/README.md
        echo '```' >> docs/quality/README.md
        
    - name: 📊 Upload analysis artifacts
      uses: actions/upload-artifact@v3
      with:
        name: code-analysis-reports
        path: |
          docs/metrics/
          docs/coverage/
          docs/quality/

  # 🔧 API 문서 자동 생성
  api-documentation:
    name: 🔧 API Documentation Generation
    runs-on: ubuntu-latest
    needs: code-analysis
    if: needs.code-analysis.outputs.has_code_changes == 'true' || github.event.inputs.doc_type == 'all' || github.event.inputs.doc_type == 'api'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 🔧 Install documentation tools
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pdoc3 sphinx sphinx-rtd-theme sphinx-autodoc-typehints
        pip install myst-parser sphinx-copybutton sphinx-tabs
        
    - name: 📖 Generate API documentation with pdoc
      run: |
        mkdir -p docs/api
        
        # PyPI 패키지들에 대한 API 문서 생성
        echo "# 🔧 CodePing.AI API Documentation" > docs/api/README.md
        echo "" >> docs/api/README.md
        echo "Generated on: $(date)" >> docs/api/README.md
        echo "" >> docs/api/README.md
        echo "## 📦 Universal Packages API" >> docs/api/README.md
        echo "" >> docs/api/README.md
        
        # 각 모듈별 API 문서 생성
        modules=(
          "universal_data_storage"
          "universal_webhook_receiver"
          "universal_git_data_parser"
          "universal_llm_service"
          "universal_notification_service"
          "universal_notion_sync"
          "universal_schedule_manager"
          "universal_http_api_client"
          "universal_prompt_builder"
          "universal_data_aggregator"
          "universal_data_retriever"
          "universal_diff_analyzer"
        )
        
        for module in "${modules[@]}"; do
          echo "Generating API docs for $module..."
          if python -c "import $module" 2>/dev/null; then
            pdoc3 --html --output-dir docs/api --force $module
            echo "- [$module](${module}/index.html)" >> docs/api/README.md
          else
            echo "⚠️ Module $module not available, skipping..."
            echo "- ⚠️ $module (not available)" >> docs/api/README.md
          fi
        done
        
        # 메인 애플리케이션 모듈들
        if [ -d "shared" ]; then
          pdoc3 --html --output-dir docs/api --force shared
          echo "- [shared](shared/index.html)" >> docs/api/README.md
        fi
        
        if [ -d "infrastructure" ]; then
          pdoc3 --html --output-dir docs/api --force infrastructure
          echo "- [infrastructure](infrastructure/index.html)" >> docs/api/README.md
        fi
        
    - name: 📚 Generate Sphinx documentation
      run: |
        mkdir -p docs/sphinx
        
        # Sphinx 설정 파일 생성
        cat > docs/sphinx/conf.py << 'EOF'
        import os
        import sys
        sys.path.insert(0, os.path.abspath('../..'))

        project = 'CodePing.AI'
        copyright = '2024, CodePing.AI Team'
        author = 'CodePing.AI Team'
        release = '1.0.0'

        extensions = [
            'sphinx.ext.autodoc',
            'sphinx.ext.viewcode',
            'sphinx.ext.napoleon',
            'sphinx.ext.intersphinx',
            'sphinx_autodoc_typehints',
            'myst_parser',
            'sphinx_copybutton',
            'sphinx_tabs.tabs',
        ]

        templates_path = ['_templates']
        exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']

        html_theme = 'sphinx_rtd_theme'
        html_static_path = ['_static']

        autodoc_default_options = {
            'members': True,
            'member-order': 'bysource',
            'special-members': '__init__',
            'undoc-members': True,
            'exclude-members': '__weakref__'
        }

        napoleon_google_docstring = True
        napoleon_numpy_docstring = True
        napoleon_include_init_with_doc = False
        napoleon_include_private_with_doc = False
        napoleon_include_special_with_doc = True
        napoleon_use_admonition_for_examples = False
        napoleon_use_admonition_for_notes = False
        napoleon_use_admonition_for_references = False
        napoleon_use_ivar = False
        napoleon_use_param = True
        napoleon_use_rtype = True
        napoleon_preprocess_types = False
        napoleon_type_aliases = None
        napoleon_attr_annotations = True

        source_suffix = {
            '.rst': None,
            '.md': 'myst_parser.sphinx_',
        }
        EOF
        
        # 메인 index.rst 생성
        cat > docs/sphinx/index.rst << 'EOF'
        CodePing.AI Documentation
        =========================

        Welcome to CodePing.AI's documentation!

        .. toctree::
           :maxdepth: 2
           :caption: Contents:

           modules
           api_reference
           architecture
           deployment

        Indices and tables
        ==================

        * :ref:`genindex`
        * :ref:`modindex`
        * :ref:`search`
        EOF
        
        # 모듈 문서 자동 생성
        sphinx-apidoc -o docs/sphinx . --separate -f
        
        # Sphinx 빌드
        cd docs/sphinx
        make html || echo "Sphinx build completed with warnings"
        
    - name: 📊 Upload API documentation
      uses: actions/upload-artifact@v3
      with:
        name: api-documentation
        path: |
          docs/api/
          docs/sphinx/

  # 🏗️ 아키텍처 문서 자동 생성
  architecture-documentation:
    name: 🏗️ Architecture Documentation
    runs-on: ubuntu-latest
    needs: code-analysis
    if: needs.code-analysis.outputs.has_code_changes == 'true' || github.event.inputs.doc_type == 'all' || github.event.inputs.doc_type == 'architecture'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 🔧 Install analysis tools
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pydeps graphviz pyreverse pylint
        
    - name: 🏗️ Generate architecture diagrams
      run: |
        mkdir -p docs/architecture
        
        echo "# 🏗️ CodePing.AI Architecture Documentation" > docs/architecture/README.md
        echo "" >> docs/architecture/README.md
        echo "Generated on: $(date)" >> docs/architecture/README.md
        echo "" >> docs/architecture/README.md
        
        # 모듈 의존성 다이어그램 생성
        echo "## 📦 Module Dependencies" >> docs/architecture/README.md
        echo "" >> docs/architecture/README.md
        
        # PyPI 패키지 의존성 분석
        python -c "
        import subprocess
        import json
        
        packages = [
            'universal_data_storage',
            'universal_webhook_receiver', 
            'universal_git_data_parser',
            'universal_llm_service',
            'universal_notification_service',
            'universal_notion_sync',
            'universal_schedule_manager',
            'universal_http_api_client',
            'universal_prompt_builder',
            'universal_data_aggregator',
            'universal_data_retriever',
            'universal_diff_analyzer'
        ]
        
        print('```mermaid')
        print('graph TD')
        
        # 패키지 노드 생성
        for i, pkg in enumerate(packages):
            clean_name = pkg.replace('universal_', '').replace('_', ' ').title()
            print(f'    {pkg.upper()}[\"{clean_name}\"]')
            
        # 주요 의존성 관계 정의
        dependencies = [
            ('UNIVERSAL_WEBHOOK_RECEIVER', 'UNIVERSAL_DATA_STORAGE'),
            ('UNIVERSAL_GIT_DATA_PARSER', 'UNIVERSAL_DATA_STORAGE'),
            ('UNIVERSAL_LLM_SERVICE', 'UNIVERSAL_PROMPT_BUILDER'),
            ('UNIVERSAL_NOTIFICATION_SERVICE', 'UNIVERSAL_DATA_RETRIEVER'),
            ('UNIVERSAL_SCHEDULE_MANAGER', 'UNIVERSAL_DATA_STORAGE'),
            ('UNIVERSAL_DATA_AGGREGATOR', 'UNIVERSAL_DATA_RETRIEVER'),
            ('UNIVERSAL_DIFF_ANALYZER', 'UNIVERSAL_GIT_DATA_PARSER'),
        ]
        
        for src, dst in dependencies:
            print(f'    {src} --> {dst}')
            
        print('```')
        " >> docs/architecture/README.md
        
        # 시스템 아키텍처 다이어그램
        echo "" >> docs/architecture/README.md
        echo "## 🔄 System Architecture" >> docs/architecture/README.md
        echo "" >> docs/architecture/README.md
        echo '```mermaid' >> docs/architecture/README.md
        echo 'graph TB' >> docs/architecture/README.md
        echo '    subgraph "External Services"' >> docs/architecture/README.md
        echo '        GitHub["🔗 GitHub"]' >> docs/architecture/README.md
        echo '        Slack["📱 Slack"]' >> docs/architecture/README.md
        echo '        OpenAI["🤖 OpenAI"]' >> docs/architecture/README.md
        echo '        Notion["📝 Notion"]' >> docs/architecture/README.md
        echo '    end' >> docs/architecture/README.md
        echo '' >> docs/architecture/README.md
        echo '    subgraph "CodePing.AI Core"' >> docs/architecture/README.md
        echo '        WH["🔗 Webhook Receiver"]' >> docs/architecture/README.md
        echo '        GP["🔍 Git Parser"]' >> docs/architecture/README.md
        echo '        DS["📊 Data Storage"]' >> docs/architecture/README.md
        echo '        LLM["🤖 LLM Service"]' >> docs/architecture/README.md
        echo '        NS["📱 Notification"]' >> docs/architecture/README.md
        echo '    end' >> docs/architecture/README.md
        echo '' >> docs/architecture/README.md
        echo '    subgraph "Infrastructure"' >> docs/architecture/README.md
        echo '        DB["🗄️ PostgreSQL"]' >> docs/architecture/README.md
        echo '        S3["☁️ AWS S3"]' >> docs/architecture/README.md
        echo '        Redis["🔄 Redis"]' >> docs/architecture/README.md
        echo '    end' >> docs/architecture/README.md
        echo '' >> docs/architecture/README.md
        echo '    GitHub --> WH' >> docs/architecture/README.md
        echo '    WH --> GP' >> docs/architecture/README.md
        echo '    GP --> DS' >> docs/architecture/README.md
        echo '    DS --> DB' >> docs/architecture/README.md
        echo '    DS --> S3' >> docs/architecture/README.md
        echo '    LLM --> OpenAI' >> docs/architecture/README.md
        echo '    NS --> Slack' >> docs/architecture/README.md
        echo '    NS --> Notion' >> docs/architecture/README.md
        echo '```' >> docs/architecture/README.md
        
        # 파일 구조 분석
        echo "" >> docs/architecture/README.md
        echo "## 📁 Project Structure" >> docs/architecture/README.md
        echo "" >> docs/architecture/README.md
        echo '```' >> docs/architecture/README.md
        tree -I '__pycache__|*.pyc|.git|.venv|node_modules' -L 3 >> docs/architecture/README.md 2>/dev/null || find . -type d -name "__pycache__" -prune -o -type f -print | head -50 >> docs/architecture/README.md
        echo '```' >> docs/architecture/README.md
        
    - name: 📊 Upload architecture documentation
      uses: actions/upload-artifact@v3
      with:
        name: architecture-documentation
        path: docs/architecture/

  # 📝 변경 로그 자동 생성
  changelog-generation:
    name: 📝 Changelog Generation
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' || github.event.inputs.doc_type == 'all' || github.event.inputs.doc_type == 'changelog'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 📝 Generate changelog
      run: |
        mkdir -p docs/changelog
        
        echo "# 📝 CodePing.AI Changelog" > docs/changelog/CHANGELOG.md
        echo "" >> docs/changelog/CHANGELOG.md
        echo "All notable changes to this project will be documented in this file." >> docs/changelog/CHANGELOG.md
        echo "" >> docs/changelog/CHANGELOG.md
        echo "The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/)," >> docs/changelog/CHANGELOG.md
        echo "and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html)." >> docs/changelog/CHANGELOG.md
        echo "" >> docs/changelog/CHANGELOG.md
        
        # 태그 기반 변경 로그 생성
        TAGS=$(git tag --sort=-version:refname | head -10)
        
        if [ -z "$TAGS" ]; then
          echo "## [Unreleased]" >> docs/changelog/CHANGELOG.md
          echo "" >> docs/changelog/CHANGELOG.md
          
          # 전체 커밋 히스토리를 카테고리별로 분류
          echo "### 🚀 Features" >> docs/changelog/CHANGELOG.md
          git log --oneline --grep="feat:" --pretty=format:"- %s (%h)" >> docs/changelog/CHANGELOG.md
          echo "" >> docs/changelog/CHANGELOG.md
          echo "" >> docs/changelog/CHANGELOG.md
          
          echo "### 🐛 Bug Fixes" >> docs/changelog/CHANGELOG.md
          git log --oneline --grep="fix:" --pretty=format:"- %s (%h)" >> docs/changelog/CHANGELOG.md
          echo "" >> docs/changelog/CHANGELOG.md
          echo "" >> docs/changelog/CHANGELOG.md
          
          echo "### 🔧 Improvements" >> docs/changelog/CHANGELOG.md
          git log --oneline --grep="refactor:\|perf:\|style:" --pretty=format:"- %s (%h)" >> docs/changelog/CHANGELOG.md
          echo "" >> docs/changelog/CHANGELOG.md
          echo "" >> docs/changelog/CHANGELOG.md
          
          echo "### 📚 Documentation" >> docs/changelog/CHANGELOG.md
          git log --oneline --grep="docs:" --pretty=format:"- %s (%h)" >> docs/changelog/CHANGELOG.md
          echo "" >> docs/changelog/CHANGELOG.md
          
        else
          for tag in $TAGS; do
            echo "## [$tag] - $(git log -1 --format=%ai $tag | cut -d' ' -f1)" >> docs/changelog/CHANGELOG.md
            echo "" >> docs/changelog/CHANGELOG.md
            
            # 이전 태그와의 차이점 분석
            PREV_TAG=$(git tag --sort=-version:refname | grep -A1 $tag | tail -1)
            if [ "$PREV_TAG" != "$tag" ] && [ -n "$PREV_TAG" ]; then
              RANGE="$PREV_TAG..$tag"
            else
              RANGE="$tag"
            fi
            
            # 카테고리별 변경사항
            FEATURES=$(git log $RANGE --oneline --grep="feat:" --pretty=format:"- %s (%h)")
            if [ -n "$FEATURES" ]; then
              echo "### 🚀 Features" >> docs/changelog/CHANGELOG.md
              echo "$FEATURES" >> docs/changelog/CHANGELOG.md
              echo "" >> docs/changelog/CHANGELOG.md
            fi
            
            FIXES=$(git log $RANGE --oneline --grep="fix:" --pretty=format:"- %s (%h)")
            if [ -n "$FIXES" ]; then
              echo "### 🐛 Bug Fixes" >> docs/changelog/CHANGELOG.md
              echo "$FIXES" >> docs/changelog/CHANGELOG.md
              echo "" >> docs/changelog/CHANGELOG.md
            fi
            
            IMPROVEMENTS=$(git log $RANGE --oneline --grep="refactor:\|perf:\|style:" --pretty=format:"- %s (%h)")
            if [ -n "$IMPROVEMENTS" ]; then
              echo "### 🔧 Improvements" >> docs/changelog/CHANGELOG.md
              echo "$IMPROVEMENTS" >> docs/changelog/CHANGELOG.md
              echo "" >> docs/changelog/CHANGELOG.md
            fi
            
            DOCS=$(git log $RANGE --oneline --grep="docs:" --pretty=format:"- %s (%h)")
            if [ -n "$DOCS" ]; then
              echo "### 📚 Documentation" >> docs/changelog/CHANGELOG.md
              echo "$DOCS" >> docs/changelog/CHANGELOG.md
              echo "" >> docs/changelog/CHANGELOG.md
            fi
            
            echo "" >> docs/changelog/CHANGELOG.md
          done
        fi
        
        # 최근 변경사항 요약
        echo "# 📊 Recent Changes Summary" > docs/changelog/RECENT.md
        echo "" >> docs/changelog/RECENT.md
        echo "Generated on: $(date)" >> docs/changelog/RECENT.md
        echo "" >> docs/changelog/RECENT.md
        
        # 최근 7일간의 변경사항
        echo "## 📅 Last 7 Days" >> docs/changelog/RECENT.md
        git log --since="7 days ago" --oneline --pretty=format:"- %s (%h) by %an" >> docs/changelog/RECENT.md
        echo "" >> docs/changelog/RECENT.md
        echo "" >> docs/changelog/RECENT.md
        
        # 통계 정보
        echo "## 📊 Statistics" >> docs/changelog/RECENT.md
        echo "- **Total Commits**: $(git rev-list --all --count)" >> docs/changelog/RECENT.md
        echo "- **Contributors**: $(git shortlog -sn | wc -l)" >> docs/changelog/RECENT.md
        echo "- **Branches**: $(git branch -r | wc -l)" >> docs/changelog/RECENT.md
        echo "- **Tags**: $(git tag | wc -l)" >> docs/changelog/RECENT.md
        
    - name: 📊 Upload changelog
      uses: actions/upload-artifact@v3
      with:
        name: changelog-documentation
        path: docs/changelog/

  # 📚 문서 통합 및 배포
  documentation-deployment:
    name: 📚 Documentation Deployment
    runs-on: ubuntu-latest
    needs: [code-analysis, api-documentation, architecture-documentation, changelog-generation]
    if: always() && (needs.code-analysis.result == 'success')
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📥 Download all documentation artifacts
      uses: actions/download-artifact@v3
      with:
        path: generated-docs/
        
    - name: 🔧 Set up documentation structure
      run: |
        mkdir -p docs-site
        
        # 메인 문서 인덱스 생성
        cat > docs-site/index.html << 'EOF'
        <!DOCTYPE html>
        <html lang="ko">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>📚 CodePing.AI Documentation</title>
            <style>
                body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }
                .container { max-width: 1200px; margin: 0 auto; background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
                h1 { color: #2c3e50; border-bottom: 3px solid #3498db; padding-bottom: 10px; }
                .grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin-top: 30px; }
                .card { background: #f8f9fa; padding: 20px; border-radius: 8px; border-left: 4px solid #3498db; }
                .card h3 { margin-top: 0; color: #2c3e50; }
                .card a { color: #3498db; text-decoration: none; font-weight: 500; }
                .card a:hover { text-decoration: underline; }
                .badge { background: #e74c3c; color: white; padding: 2px 8px; border-radius: 12px; font-size: 12px; }
                .updated { color: #27ae60; font-size: 14px; }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>📚 CodePing.AI Documentation Hub</h1>
                <p>자동 생성된 프로젝트 문서들을 한 곳에서 확인하세요.</p>
                <p class="updated">🕐 마지막 업데이트: $(date)</p>
                
                <div class="grid">
                    <div class="card">
                        <h3>🔧 API Documentation</h3>
                        <p>모든 모듈과 함수의 상세한 API 문서</p>
                        <a href="api/">API 문서 보기</a>
                    </div>
                    
                    <div class="card">
                        <h3>🏗️ Architecture</h3>
                        <p>시스템 아키텍처와 모듈 의존성 다이어그램</p>
                        <a href="architecture/">아키텍처 문서 보기</a>
                    </div>
                    
                    <div class="card">
                        <h3>📊 Code Metrics</h3>
                        <p>코드 복잡도, 품질 지표 및 분석 리포트</p>
                        <a href="metrics/">메트릭 보기</a>
                    </div>
                    
                    <div class="card">
                        <h3>📈 Test Coverage</h3>
                        <p>테스트 커버리지 리포트와 상세 분석</p>
                        <a href="coverage/">커버리지 보기</a>
                    </div>
                    
                    <div class="card">
                        <h3>📝 Changelog</h3>
                        <p>프로젝트 변경 이력과 릴리스 노트</p>
                        <a href="changelog/">변경 로그 보기</a>
                    </div>
                    
                    <div class="card">
                        <h3>📋 Quality Report</h3>
                        <p>문서화 품질과 코드 스타일 리포트</p>
                        <a href="quality/">품질 리포트 보기</a>
                    </div>
                </div>
                
                <hr style="margin: 40px 0;">
                <p style="text-align: center; color: #7f8c8d;">
                    🤖 이 문서들은 GitHub Actions를 통해 자동으로 생성되었습니다.<br>
                    📅 다음 업데이트: 코드 변경 시 또는 매주 일요일
                </p>
            </div>
        </body>
        </html>
        EOF
        
        # 생성된 문서들을 docs-site로 복사
        if [ -d "generated-docs/code-analysis-reports" ]; then
          cp -r generated-docs/code-analysis-reports/* docs-site/ 2>/dev/null || true
        fi
        
        if [ -d "generated-docs/api-documentation" ]; then
          cp -r generated-docs/api-documentation/* docs-site/ 2>/dev/null || true
        fi
        
        if [ -d "generated-docs/architecture-documentation" ]; then
          cp -r generated-docs/architecture-documentation/* docs-site/ 2>/dev/null || true
        fi
        
        if [ -d "generated-docs/changelog-documentation" ]; then
          cp -r generated-docs/changelog-documentation/* docs-site/ 2>/dev/null || true
        fi
        
    - name: 📚 Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      if: github.ref == 'refs/heads/main'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs-site
        destination_dir: docs
        
    - name: 📊 Upload complete documentation
      uses: actions/upload-artifact@v3
      with:
        name: complete-documentation-site
        path: docs-site/

  # 📱 문서 알림
  documentation-notification:
    name: 📱 Documentation Notification
    runs-on: ubuntu-latest
    needs: [documentation-deployment]
    if: always() && needs.documentation-deployment.result == 'success'
    
    steps:
    - name: 📱 Send documentation update notification
      run: |
        echo "📚 Documentation has been updated!"
        echo "🔗 View documentation at: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/docs/"
        echo "📊 Updated sections:"
        echo "  - 🔧 API Documentation"
        echo "  - 🏗️ Architecture Diagrams" 
        echo "  - 📊 Code Metrics"
        echo "  - 📈 Test Coverage"
        echo "  - 📝 Changelog"
        echo "  - 📋 Quality Reports"
        echo ""
        echo "🕐 Last updated: $(date)"
        echo "🔄 Next update: On code changes or weekly"