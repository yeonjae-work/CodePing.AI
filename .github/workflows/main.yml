name: 🚀 CodePing.AI CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.12"

jobs:
  # 🧪 테스트 및 품질 검사
  test:
    name: 🧪 Test & Quality Check
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov black flake8 bandit safety
        
        echo "✅ All dependencies installed from requirements.txt"
        
        echo "🔍 Debugging: Checking installed packages..."
        echo "📋 All installed packages:"
        pip list | grep yeonjae || echo "❌ No yeonjae packages found"
        
        echo "📂 Python path:"
        python -c "import sys; print('\n'.join(sys.path))"
        
        echo "🧪 Testing individual package imports:"
        python -c "
        import os
        import sys
        
        # Check site-packages directory
        site_packages = '/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/site-packages'
        print(f'📁 Contents of site-packages:')
        
        yeonjae_dirs = [d for d in os.listdir(site_packages) if 'yeonjae' in d.lower()]
        for d in sorted(yeonjae_dirs):
            print(f'  - {d}')
            full_path = os.path.join(site_packages, d)
            if os.path.isdir(full_path):
                try:
                    contents = os.listdir(full_path)[:5]  # Show first 5 items
                    print(f'    Contents: {contents}')
                except:
                    pass
        
        print('\n🔍 Trying different import patterns:')
        test_packages = [
            'universal_git_data_parser',
            'universal_webhook_receiver', 
            'yeonjae_universal_git_data_parser',
            'yeonjae_universal_webhook_receiver'
        ]
        
        for pkg in test_packages:
            try:
                __import__(pkg)
                print(f'✅ {pkg} - SUCCESS')
            except ImportError as e:
                print(f'❌ {pkg} - FAILED: {e}')
        "
        
    - name: 🔍 Code quality checks
      run: |
        echo "🎨 Code formatting..."
        black --check . || (echo "❌ Code formatting failed" && exit 1)
        
        echo "📏 Linting..."
        flake8 . --max-line-length=88 --extend-ignore=E203,W503 || (echo "❌ Linting failed" && exit 1)
        
        echo "🔒 Security scan..."
        bandit -r . -f json -o bandit-report.json || echo "⚠️ Security warnings found"
        safety check || echo "⚠️ Dependency vulnerabilities found"
        
    - name: 🧪 Run tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
      run: |
        echo "🧪 Running tests..."
        python -m pytest tests/ -v --cov=. --cov-report=xml --cov-report=term
        
        echo "🔧 Testing available imports..."
        python -c "
        import sys
        print(f'🐍 Python version: {sys.version}')
        
        # 로컬 모듈 테스트
        local_modules = ['shared.config.settings', 'infrastructure', 'main']
        success_local = 0
        
        for module in local_modules:
            try:
                __import__(module)
                print(f'✅ {module}')
                success_local += 1
            except ImportError as e:
                print(f'⚠️ {module}: {e}')
        
        # PyPI 패키지 테스트 (yeonjae- prefix, 하이픈은 언더스코어로 변환)
        pypi_packages = [
            'yeonjae_universal_git_data_parser',
            'yeonjae_universal_http_api_client', 
            'yeonjae_universal_llm_service',
            'yeonjae_universal_notification_service',
            'yeonjae_universal_notion_sync',
            'yeonjae_universal_data_aggregator',
            'yeonjae_universal_data_retriever',
            'yeonjae_universal_data_storage',
            'yeonjae_universal_diff_analyzer',
            'yeonjae_universal_prompt_builder',
            'yeonjae_universal_schedule_manager',
            'yeonjae_universal_webhook_receiver'
        ]
        success_pypi = 0
        
        for pkg in pypi_packages:
            try:
                __import__(pkg)
                print(f'✅ {pkg} (PyPI)')
                success_pypi += 1
            except ImportError as e:
                print(f'⚠️ {pkg}: {e}')
        
        print(f'📊 Import 결과:')
        print(f'   로컬 모듈: {success_local}/{len(local_modules)}')
        print(f'   PyPI 패키지: {success_pypi}/{len(pypi_packages)}')
        "
        
    - name: 📊 Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  # 🐳 Docker 빌드
  docker:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: 🐳 Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔧 Build and test
      run: |
        echo "🐳 Building Docker image..."
        docker build -t codeping-ai:latest .
        
        echo "🧪 Testing Docker image..."
        docker run --rm codeping-ai:latest python -c "
        print('🐍 Python version check passed')
        try:
            import shared.config.settings
            print('✅ Application modules import successful')
        except Exception as e:
            print(f'⚠️ Import warning: {e}')
        print('🎉 Docker test completed')
        "

  # 📚 문서 업데이트 (main 브랜치만)
  docs:
    name: 📚 Update Documentation
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Install doc tools
      run: |
        pip install -r requirements.txt
        pip install pdoc3 pytest-cov radon
        
    - name: 🔍 Check if docs update needed
      id: check
      run: |
        if git diff --name-only HEAD~1 HEAD | grep -E '\.(py|md)$' > /dev/null; then
          echo "update_needed=true" >> $GITHUB_OUTPUT
          echo "📝 Code/docs changes detected - updating documentation"
        else
          echo "update_needed=false" >> $GITHUB_OUTPUT
          echo "ℹ️ No significant changes - skipping documentation update"
        fi
        
    - name: 📖 Generate API docs
      if: steps.check.outputs.update_needed == 'true'
      run: |
        mkdir -p docs-site/api
        
        echo "# 🔧 CodePing.AI API Documentation" > docs-site/api/README.md
        echo "Generated on: $(date)" >> docs-site/api/README.md
        echo "" >> docs-site/api/README.md
        
        # 메인 모듈 문서화
        if [ -d "shared" ]; then
          pdoc3 --html --output-dir docs-site/api --force shared
          echo "- [shared](shared/index.html)" >> docs-site/api/README.md
        fi
        
        if [ -d "infrastructure" ]; then
          pdoc3 --html --output-dir docs-site/api --force infrastructure  
          echo "- [infrastructure](infrastructure/index.html)" >> docs-site/api/README.md
        fi
        
    - name: 📊 Generate metrics
      if: steps.check.outputs.update_needed == 'true'
      run: |
        mkdir -p docs-site/metrics
        
        echo "# 📊 Code Metrics" > docs-site/metrics/README.md
        echo "Generated on: $(date)" >> docs-site/metrics/README.md
        echo "" >> docs-site/metrics/README.md
        
        # 테스트 커버리지
        echo "## 📈 Test Coverage" >> docs-site/metrics/README.md
        python -m pytest tests/ --cov=. --cov-report=term | tail -1 >> docs-site/metrics/README.md || echo "No tests found"
        echo "" >> docs-site/metrics/README.md
        
        # 코드 복잡도
        echo "## 🔍 Code Complexity" >> docs-site/metrics/README.md
        radon cc . --total-average >> docs-site/metrics/README.md || echo "Complexity analysis not available"
        
    - name: 📝 Generate changelog
      if: steps.check.outputs.update_needed == 'true'
      run: |
        mkdir -p docs-site/changelog
        
        echo "# 📝 Recent Changes" > docs-site/changelog/README.md
        echo "Generated on: $(date)" >> docs-site/changelog/README.md
        echo "" >> docs-site/changelog/README.md
        
        echo "## 📅 Last 10 Commits" >> docs-site/changelog/README.md
        git log --oneline -10 --pretty=format:"- %s (%h)" >> docs-site/changelog/README.md
        
    - name: 🏠 Create main page
      if: steps.check.outputs.update_needed == 'true'
      run: |
        cat > docs-site/index.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
            <title>📚 CodePing.AI Documentation</title>
            <style>
                body { font-family: -apple-system, BlinkMacSystemFont, sans-serif; margin: 40px; }
                .card { background: #f8f9fa; padding: 20px; margin: 20px 0; border-radius: 8px; }
                h1 { color: #2c3e50; }
                a { color: #3498db; text-decoration: none; }
                a:hover { text-decoration: underline; }
            </style>
        </head>
        <body>
            <h1>📚 CodePing.AI Documentation</h1>
            <p>자동 생성된 프로젝트 문서</p>
            
            <div class="card">
                <h3>🔧 API Documentation</h3>
                <p>코드 모듈 및 함수 문서</p>
                <a href="api/">API 문서 보기</a>
            </div>
            
            <div class="card">
                <h3>📊 Code Metrics</h3>
                <p>테스트 커버리지 및 코드 품질 지표</p>
                <a href="metrics/">메트릭 보기</a>
            </div>
            
            <div class="card">
                <h3>📝 Changelog</h3>
                <p>최근 변경사항 및 커밋 이력</p>
                <a href="changelog/">변경 로그 보기</a>
            </div>
            
            <hr>
            <p style="color: #7f8c8d; text-align: center;">
                🤖 자동 생성 • 마지막 업데이트: $(date)
            </p>
        </body>
        </html>
        EOF
        
    - name: 🚀 Deploy to GitHub Pages
      if: steps.check.outputs.update_needed == 'true'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs-site
        destination_dir: docs

  # 🚀 배포 (Production)
  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: 🔧 Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.PRODUCTION_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.PRODUCTION_HOST }} >> ~/.ssh/known_hosts
        
    - name: 🚀 Deploy to Production Server
      run: |
        echo "🚀 Deploying CodePing.AI to production server..."
        echo "📊 Deployment info:"
        echo "  - Commit: ${{ github.sha }}"
        echo "  - Branch: ${{ github.ref_name }}"
        echo "  - Author: ${{ github.actor }}"
        echo "  - Time: $(date)"
        echo "  - Target: ${{ secrets.PRODUCTION_HOST }}"
        echo ""
        
        # 프로덕션 서버에 최신 코드 배포
        ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.PRODUCTION_HOST }} << 'EOF'
          echo "🔄 Starting deployment on production server..."
          
          # 프로젝트 디렉토리로 이동
          cd ~/codeping-ai || { echo "❌ Project directory not found"; exit 1; }
          
          # Git 저장소 업데이트 (백업 후)
          echo "📥 Updating source code..."
          cp -r . ../codeping-ai-backup-$(date +%Y%m%d_%H%M%S) || echo "⚠️ Backup failed"
          
          # 최신 코드 가져오기 (파일 직접 업데이트)
          echo "📦 Updating requirements.txt and main.py..."
          
          # Docker 컨테이너 중지
          echo "🛑 Stopping containers..."
          docker-compose down
          
          # Docker 이미지 재빌드 (캐시 없이)
          echo "🐳 Rebuilding Docker images..."
          docker-compose build --no-cache --pull
          
          # 컨테이너 재시작
          echo "🚀 Starting containers..."
          docker-compose up -d
          
          # 컨테이너 상태 확인
          echo "🔍 Checking container status..."
          sleep 10
          docker ps | grep codeping
          
          echo "✅ Deployment completed successfully!"
        EOF
        
    - name: 📁 Deploy Latest Files
      run: |
        echo "📁 Deploying latest application files..."
        
        # requirements.txt 업데이트
        scp -o StrictHostKeyChecking=no requirements.txt ubuntu@${{ secrets.PRODUCTION_HOST }}:~/codeping-ai/requirements.txt
        
        # main.py 업데이트  
        scp -o StrictHostKeyChecking=no main.py ubuntu@${{ secrets.PRODUCTION_HOST }}:~/codeping-ai/main.py
        
        # 기타 중요 파일들 업데이트
        scp -o StrictHostKeyChecking=no docker-compose.yml ubuntu@${{ secrets.PRODUCTION_HOST }}:~/codeping-ai/docker-compose.yml
        scp -o StrictHostKeyChecking=no Dockerfile ubuntu@${{ secrets.PRODUCTION_HOST }}:~/codeping-ai/Dockerfile
        
        echo "✅ Files deployed successfully"
        
    - name: 🔄 Restart Production Services
      run: |
        echo "🔄 Restarting production services..."
        
        ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.PRODUCTION_HOST }} << 'EOF'
          cd ~/codeping-ai
          
          # Docker 컨테이너 재시작
          echo "🐳 Restarting Docker containers..."
          docker-compose restart
          
          # 헬스 체크 대기
          echo "⏳ Waiting for services to start..."
          sleep 15
          
          # 컨테이너 상태 확인
          echo "📊 Container status:"
          docker-compose ps
          
          # 웹 애플리케이션 헬스 체크
          echo "🏥 Health check:"
          curl -f http://localhost:9001/health || echo "⚠️ Health check failed"
          
          echo "✅ Production restart completed!"
        EOF
        
    - name: 🏥 Post-Deployment Health Check
      run: |
        echo "🏥 Running post-deployment health checks..."
        
        # 외부에서 웹훅 엔드포인트 테스트
        echo "🔍 Testing webhook endpoint..."
        curl -f http://${{ secrets.PRODUCTION_HOST }}:9001/health || echo "⚠️ External health check failed"
        
        echo "✅ All health checks completed"
        echo "🔗 Application URL: http://${{ secrets.PRODUCTION_HOST }}:9001"

  # 📱 알림
  notify:
    name: 📱 Notification
    runs-on: ubuntu-latest
    needs: [test, docker, docs, deploy]
    if: always()
    
    steps:
    - name: 📱 Success notification
      if: needs.test.result == 'success'
      run: |
        echo "✅ CI/CD Pipeline completed successfully!"
        echo "📊 Results:"
        echo "  - Tests: ${{ needs.test.result }}"
        echo "  - Docker: ${{ needs.docker.result }}"
        echo "  - Docs: ${{ needs.docs.result }}"
        echo "  - Deploy: ${{ needs.deploy.result }}"
        echo ""
        if [[ "${{ needs.docs.result }}" == "success" ]]; then
          echo "📚 Documentation updated: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/docs/"
        fi
        
    - name: 📱 Failure notification
      if: failure()
      run: |
        echo "❌ CI/CD Pipeline failed!"
        echo "🔧 Please check the logs and fix the issues" 