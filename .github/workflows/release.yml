name: 🏷️ Release Management

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version type'
        required: true
        default: 'patch'
        type: choice
        options:
        - major
        - minor
        - patch
      pre_release:
        description: 'Pre-release'
        required: false
        default: false
        type: boolean

env:
  PYTHON_VERSION: "3.12"

jobs:
  # 🏷️ 버전 관리 및 태그 생성
  version-management:
    name: 🏷️ Version Management
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      changelog: ${{ steps.changelog.outputs.changelog }}
      
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 🔧 Install version management tools
      run: |
        pip install bump2version gitpython
        
    - name: 🏷️ Generate new version
      id: version
      run: |
        # 현재 버전 확인
        CURRENT_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "Current version: $CURRENT_VERSION"
        
        # 새 버전 계산
        VERSION_TYPE="${{ github.event.inputs.version_type }}"
        
        # 버전 파일 생성 (없는 경우)
        if [ ! -f .bumpversion.cfg ]; then
          cat > .bumpversion.cfg << EOF
        [bumpversion]
        current_version = 0.1.0
        commit = True
        tag = True
        tag_name = v{new_version}
        
        [bumpversion:file:VERSION]
        EOF
        fi
        
        if [ ! -f VERSION ]; then
          echo "0.1.0" > VERSION
        fi
        
        # 버전 업데이트
        bump2version $VERSION_TYPE --dry-run --list | grep new_version= | cut -d= -f2 > new_version.txt
        NEW_VERSION=$(cat new_version.txt)
        
        echo "new_version=v$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "New version: v$NEW_VERSION"
        
    - name: 📝 Generate changelog
      id: changelog
      run: |
        echo "📝 Generating changelog..."
        
        # 이전 태그부터 현재까지의 커밋 로그 수집
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || git rev-list --max-parents=0 HEAD)
        
        cat > CHANGELOG_TEMP.md << EOF
        # Changelog for ${{ steps.version.outputs.new_version }}
        
        ## 🚀 새로운 기능
        EOF
        
        # feat: 커밋들 추출
        git log $LAST_TAG..HEAD --oneline --grep="feat:" --pretty=format:"- %s" >> CHANGELOG_TEMP.md
        
        cat >> CHANGELOG_TEMP.md << EOF
        
        ## 🐛 버그 수정
        EOF
        
        # fix: 커밋들 추출
        git log $LAST_TAG..HEAD --oneline --grep="fix:" --pretty=format:"- %s" >> CHANGELOG_TEMP.md
        
        cat >> CHANGELOG_TEMP.md << EOF
        
        ## 🔧 개선사항
        EOF
        
        # refactor:, perf:, style: 커밋들 추출
        git log $LAST_TAG..HEAD --oneline --grep="refactor:\|perf:\|style:" --pretty=format:"- %s" >> CHANGELOG_TEMP.md
        
        cat >> CHANGELOG_TEMP.md << EOF
        
        ## 📚 문서
        EOF
        
        # docs: 커밋들 추출
        git log $LAST_TAG..HEAD --oneline --grep="docs:" --pretty=format:"- %s" >> CHANGELOG_TEMP.md
        
        # 변경사항을 GitHub Output으로 설정
        CHANGELOG_CONTENT=$(cat CHANGELOG_TEMP.md)
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG_CONTENT" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: 🏷️ Create and push tag
      run: |
        NEW_VERSION="${{ steps.version.outputs.new_version }}"
        
        # Git 설정
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # 버전 파일 업데이트
        echo "${NEW_VERSION#v}" > VERSION
        git add VERSION .bumpversion.cfg
        
        # 커밋 및 태그 생성
        git commit -m "chore: bump version to $NEW_VERSION"
        git tag -a "$NEW_VERSION" -m "Release $NEW_VERSION"
        
        # 푸시
        git push origin main
        git push origin "$NEW_VERSION"

  # 📦 릴리스 빌드
  build-release:
    name: 📦 Build Release
    runs-on: ubuntu-latest
    needs: version-management
    if: always() && (needs.version-management.result == 'success' || github.event_name == 'push')
    
    outputs:
      release_version: ${{ steps.get-version.outputs.version }}
      
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🏷️ Get version
      id: get-version
      run: |
        if [ "${{ github.event_name }}" == "push" ]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION="${{ needs.version-management.outputs.new_version }}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Release version: $VERSION"
        
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 🔧 Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        
    - name: 📦 Build distribution packages
      run: |
        # 릴리스용 설정 파일 생성
        cat > pyproject.toml << EOF
        [build-system]
        requires = ["setuptools>=45", "wheel", "setuptools_scm"]
        build-backend = "setuptools.build_meta"
        
        [project]
        name = "codeping-ai"
        version = "${{ steps.get-version.outputs.version }}"
        description = "AI-driven code change monitoring and notification system"
        readme = "README.md"
        authors = [
            {name = "CodePing.AI Team", email = "team@codeping.ai"}
        ]
        license = {text = "MIT"}
        classifiers = [
            "Development Status :: 4 - Beta",
            "Intended Audience :: Developers",
            "License :: OSI Approved :: MIT License",
            "Programming Language :: Python :: 3",
            "Programming Language :: Python :: 3.11",
            "Programming Language :: Python :: 3.12",
        ]
        requires-python = ">=3.11"
        dependencies = [
            "fastapi>=0.100.0",
            "uvicorn>=0.22.0",
            "sqlalchemy>=2.0.0",
            "pydantic>=2.0.0",
        ]
        
        [project.urls]
        Homepage = "https://github.com/yeonjae-work/CodePing.AI"
        Repository = "https://github.com/yeonjae-work/CodePing.AI"
        Issues = "https://github.com/yeonjae-work/CodePing.AI/issues"
        EOF
        
        # 빌드 실행
        python -m build
        
    - name: 📊 Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: release-distributions
        path: dist/

  # 🐳 릴리스 Docker 이미지
  build-release-docker:
    name: 🐳 Build Release Docker Image
    runs-on: ubuntu-latest
    needs: build-release
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔐 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 🏷️ Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=tag
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ needs.build-release.outputs.release_version }}
          
    - name: 🔨 Build and push release image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # 📄 GitHub 릴리스 생성
  create-github-release:
    name: 📄 Create GitHub Release
    runs-on: ubuntu-latest
    needs: [version-management, build-release, build-release-docker]
    if: always() && (needs.build-release.result == 'success')
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📥 Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: release-distributions
        path: dist/
        
    - name: 📄 Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.build-release.outputs.release_version }}
        name: "Release ${{ needs.build-release.outputs.release_version }}"
        body: |
          # 🎉 CodePing.AI ${{ needs.build-release.outputs.release_version }}
          
          ${{ needs.version-management.outputs.changelog || '새로운 릴리스가 준비되었습니다!' }}
          
          ## 📦 설치 방법
          
          ### Docker 사용
          ```bash
          docker pull ghcr.io/${{ github.repository }}:${{ needs.build-release.outputs.release_version }}
          ```
          
          ### PyPI 패키지 사용
          ```bash
          pip install codeping-ai==${{ needs.build-release.outputs.release_version }}
          ```
          
          ## 🚀 배포된 PyPI 패키지들
          - yeonjae-universal-data-storage
          - yeonjae-universal-webhook-receiver
          - yeonjae-universal-git-data-parser
          - yeonjae-universal-notification-service
          - 그 외 8개 패키지
          
          ## 🔗 유용한 링크
          - [문서](https://github.com/${{ github.repository }}/blob/main/README.md)
          - [예제](https://github.com/${{ github.repository }}/tree/main/examples)
          - [이슈 리포트](https://github.com/${{ github.repository }}/issues)
          
        files: |
          dist/*
        draft: false
        prerelease: ${{ github.event.inputs.pre_release == 'true' }}
        generate_release_notes: true

  # 📊 릴리스 후 작업
  post-release:
    name: 📊 Post-release Tasks
    runs-on: ubuntu-latest
    needs: [create-github-release]
    if: needs.create-github-release.result == 'success'
    
    steps:
    - name: 📊 Update release metrics
      run: |
        echo "📊 Updating release metrics..."
        echo "🏷️ Version: ${{ needs.build-release.outputs.release_version }}"
        echo "📅 Release date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
        echo "🐳 Docker image: ghcr.io/${{ github.repository }}:${{ needs.build-release.outputs.release_version }}"
        
    - name: 📱 Send release notification
      run: |
        echo "📱 Sending release notification..."
        echo "✅ Release ${{ needs.build-release.outputs.release_version }} completed successfully!"
        echo "🎉 CodePing.AI is now available with the latest features and improvements!" 