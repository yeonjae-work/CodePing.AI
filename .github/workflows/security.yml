name: 🔐 Security Scanning

on:
  schedule:
    # 매일 오전 2시 (UTC)에 보안 스캔 실행
    - cron: '0 2 * * *'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.12"

jobs:
  # 🔍 의존성 취약점 스캔
  dependency-scan:
    name: 🔍 Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 🔧 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety pip-audit
        
    - name: 🔒 Safety vulnerability check
      run: |
        safety check --json --output safety-report.json || true
        safety check --short-report
        
    - name: 🔍 Pip-audit vulnerability check
      run: |
        pip-audit --format=json --output=pip-audit-report.json || true
        pip-audit --desc
        
    - name: 📊 Upload vulnerability reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: dependency-vulnerability-reports
        path: |
          safety-report.json
          pip-audit-report.json

  # 🛡️ 코드 보안 스캔
  code-security-scan:
    name: 🛡️ Code Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 🔧 Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit semgrep
        
    - name: 🛡️ Bandit security scan
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . --severity-level medium --confidence-level medium
        
    - name: 🔍 Semgrep security scan
      run: |
        semgrep --config=auto --json --output=semgrep-report.json . || true
        semgrep --config=auto --severity=ERROR .
        
    - name: 📊 Upload security scan reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: code-security-reports
        path: |
          bandit-report.json
          semgrep-report.json

  # 🐳 Docker 이미지 보안 스캔
  docker-security-scan:
    name: 🐳 Docker Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔨 Build Docker image for scanning
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: codeping-ai:security-scan
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: 🔍 Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'codeping-ai:security-scan'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: 🔍 Trivy filesystem scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'json'
        output: 'trivy-fs-results.json'
        
    - name: 🔍 Docker Scout scan
      uses: docker/scout-action@v1
      with:
        command: cves
        image: codeping-ai:security-scan
        format: sarif
        output: scout-results.sarif
        
    - name: 📊 Upload Trivy scan results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: 📊 Upload Docker Scout results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'scout-results.sarif'
        
    - name: 📊 Upload security scan artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: docker-security-reports
        path: |
          trivy-results.sarif
          trivy-fs-results.json
          scout-results.sarif

  # 🔐 시크릿 스캔
  secrets-scan:
    name: 🔐 Secrets Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 🔍 TruffleHog secrets scan
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified
        
    - name: 🔍 GitLeaks secrets scan
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  # 📊 보안 요약 리포트
  security-summary:
    name: 📊 Security Summary Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-security-scan, docker-security-scan, secrets-scan]
    if: always()
    
    steps:
    - name: 📥 Download all security reports
      uses: actions/download-artifact@v3
      with:
        path: security-reports/
        
    - name: 📊 Generate security summary
      run: |
        echo "# 🔐 Security Scan Summary Report" > security-summary.md
        echo "" >> security-summary.md
        echo "📅 **Scan Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> security-summary.md
        echo "🔗 **Commit:** ${{ github.sha }}" >> security-summary.md
        echo "🌿 **Branch:** ${{ github.ref_name }}" >> security-summary.md
        echo "" >> security-summary.md
        
        echo "## 📊 Scan Results" >> security-summary.md
        echo "" >> security-summary.md
        echo "| Scan Type | Status | Details |" >> security-summary.md
        echo "|-----------|--------|---------|" >> security-summary.md
        
        # 의존성 스캔 결과
        if [ "${{ needs.dependency-scan.result }}" == "success" ]; then
          echo "| 🔍 Dependency Scan | ✅ Passed | No critical vulnerabilities found |" >> security-summary.md
        else
          echo "| 🔍 Dependency Scan | ❌ Failed | Critical vulnerabilities detected |" >> security-summary.md
        fi
        
        # 코드 보안 스캔 결과
        if [ "${{ needs.code-security-scan.result }}" == "success" ]; then
          echo "| 🛡️ Code Security Scan | ✅ Passed | No security issues found |" >> security-summary.md
        else
          echo "| 🛡️ Code Security Scan | ❌ Failed | Security issues detected |" >> security-summary.md
        fi
        
        # Docker 보안 스캔 결과
        if [ "${{ needs.docker-security-scan.result }}" == "success" ]; then
          echo "| 🐳 Docker Security Scan | ✅ Passed | No container vulnerabilities |" >> security-summary.md
        else
          echo "| 🐳 Docker Security Scan | ❌ Failed | Container vulnerabilities found |" >> security-summary.md
        fi
        
        # 시크릿 스캔 결과
        if [ "${{ needs.secrets-scan.result }}" == "success" ]; then
          echo "| 🔐 Secrets Scan | ✅ Passed | No exposed secrets |" >> security-summary.md
        else
          echo "| 🔐 Secrets Scan | ❌ Failed | Potential secrets detected |" >> security-summary.md
        fi
        
        echo "" >> security-summary.md
        echo "## 🔧 Recommendations" >> security-summary.md
        echo "" >> security-summary.md
        
        # 실패한 스캔이 있는 경우 권장사항 추가
        if [ "${{ needs.dependency-scan.result }}" != "success" ] || \
           [ "${{ needs.code-security-scan.result }}" != "success" ] || \
           [ "${{ needs.docker-security-scan.result }}" != "success" ] || \
           [ "${{ needs.secrets-scan.result }}" != "success" ]; then
          echo "⚠️ **Security issues detected!** Please review the detailed reports and take appropriate action:" >> security-summary.md
          echo "" >> security-summary.md
          echo "1. 📥 Download detailed reports from the Actions artifacts" >> security-summary.md
          echo "2. 🔍 Review each vulnerability and assess its impact" >> security-summary.md
          echo "3. 🔧 Update dependencies to patched versions" >> security-summary.md
          echo "4. 🛡️ Fix code security issues identified by static analysis" >> security-summary.md
          echo "5. 🔐 Remove or secure any exposed secrets" >> security-summary.md
          echo "6. 🐳 Update base Docker images to latest secure versions" >> security-summary.md
        else
          echo "✅ **All security scans passed!** Your codebase appears to be secure." >> security-summary.md
          echo "" >> security-summary.md
          echo "🔄 **Next steps:**" >> security-summary.md
          echo "- Continue regular security scanning" >> security-summary.md
          echo "- Keep dependencies up to date" >> security-summary.md
          echo "- Monitor for new vulnerabilities" >> security-summary.md
        fi
        
        echo "" >> security-summary.md
        echo "## 📁 Available Reports" >> security-summary.md
        echo "" >> security-summary.md
        echo "- 📊 Dependency vulnerability reports (Safety, pip-audit)" >> security-summary.md
        echo "- 🛡️ Code security reports (Bandit, Semgrep)" >> security-summary.md
        echo "- 🐳 Docker security reports (Trivy, Docker Scout)" >> security-summary.md
        echo "- 🔐 Secrets scan reports (TruffleHog, GitLeaks)" >> security-summary.md
        
        cat security-summary.md
        
    - name: 📊 Upload security summary
      uses: actions/upload-artifact@v3
      with:
        name: security-summary-report
        path: security-summary.md

  # 🚨 보안 알림
  security-notification:
    name: 🚨 Security Notification
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-security-scan, docker-security-scan, secrets-scan]
    if: failure() && github.event_name == 'schedule'
    
    steps:
    - name: 🚨 Send security alert
      run: |
        echo "🚨 SECURITY ALERT: Critical security issues detected!"
        echo ""
        echo "📊 Scan Results:"
        echo "- Dependency Scan: ${{ needs.dependency-scan.result }}"
        echo "- Code Security Scan: ${{ needs.code-security-scan.result }}"
        echo "- Docker Security Scan: ${{ needs.docker-security-scan.result }}"
        echo "- Secrets Scan: ${{ needs.secrets-scan.result }}"
        echo ""
        echo "🔧 Immediate action required:"
        echo "1. Review the security reports in GitHub Actions"
        echo "2. Address all critical and high-severity vulnerabilities"
        echo "3. Update dependencies and fix security issues"
        echo "4. Re-run security scans to verify fixes"
        echo ""
        echo "🔗 View detailed reports: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

  # 🔄 자동 보안 업데이트 (의존성)
  auto-security-update:
    name: 🔄 Auto Security Update
    runs-on: ubuntu-latest
    needs: [dependency-scan]
    if: needs.dependency-scan.result == 'failure' && github.event_name == 'schedule'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 🔧 Install pip-tools
      run: |
        python -m pip install --upgrade pip
        pip install pip-tools safety
        
    - name: 🔄 Update vulnerable dependencies
      run: |
        echo "🔄 Checking for security updates..."
        
        # 현재 취약점 확인
        safety check --json --output current-vulns.json || true
        
        # requirements.txt 백업
        cp requirements.txt requirements.txt.backup
        
        # 의존성 업데이트 시도
        pip-compile --upgrade requirements.in || pip-compile --upgrade
        
        # 업데이트 후 취약점 재확인
        pip install -r requirements.txt
        safety check --json --output updated-vulns.json || true
        
        # 변경사항이 있는지 확인
        if ! diff -q requirements.txt requirements.txt.backup > /dev/null; then
          echo "📦 Dependencies updated for security patches"
          
          # Git 설정
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # 커밋 및 푸시
          git add requirements.txt
          git commit -m "security: auto-update vulnerable dependencies
          
          - Updated dependencies to address security vulnerabilities
          - Automated security patch via GitHub Actions
          - Previous vulnerabilities: $(cat current-vulns.json | jq -r '.vulnerabilities | length // 0') found
          - Updated vulnerabilities: $(cat updated-vulns.json | jq -r '.vulnerabilities | length // 0') found"
          
          git push origin main
          
          echo "✅ Security updates applied and committed"
        else
          echo "ℹ️ No dependency updates available"
        fi 